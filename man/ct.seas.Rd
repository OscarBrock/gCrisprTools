% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparrow_integration.R
\name{ct.seas}
\alias{ct.seas}
\title{Geneset Enrichment within a CRISPR screen using sparrow

This function is a wrapper for the `sparrow::seas()` function, which identifies differentially enriched/depleted ontological 
categories within the hits identified by a pooled screening experiment, given a provided `GenseSetDb()` object and a list of 
results objects created by `ct.generateResults()`. By default testing is performed using `fgsea` and a hypergeometric test 
(`sparrow::ora()`), and results are returned as a `SparrowResult` object. 

This function will attempt to coerce them into inputs appropriate for the above analyses via `ct.seasPrep()`, after checking 
the relevant parameters within the provided `GeneSetDb`. This is generally easier than going through the individual steps yourself, 
especially when}
\usage{
ct.seas(dflist, gdb, ...)
}
\arguments{
\item{dflist}{A  named list of gCrisprTools results objects (which will be passed to `ct.seasPrep()` with the associated `...` arguments).}

\item{gdb}{A `GenseSetDb` object containing annotations for the targets specified in `result`.}

\item{...}{Additional arguments to pass to `ct.seasPrep()`.}
}
\value{
A named list of `SparrowResults` objects.
}
\description{
Geneset Enrichment within a CRISPR screen using sparrow

This function is a wrapper for the `sparrow::seas()` function, which identifies differentially enriched/depleted ontological 
categories within the hits identified by a pooled screening experiment, given a provided `GenseSetDb()` object and a list of 
results objects created by `ct.generateResults()`. By default testing is performed using `fgsea` and a hypergeometric test 
(`sparrow::ora()`), and results are returned as a `SparrowResult` object. 

This function will attempt to coerce them into inputs appropriate for the above analyses via `ct.seasPrep()`, after checking 
the relevant parameters within the provided `GeneSetDb`. This is generally easier than going through the individual steps yourself, 
especially when
}
\examples{
data('resultsDF')
ct.seas(list('longer' = resultsDF, 'shorter' = resultsDF[1:10000,]), gsd = getMSigGeneSetDb(collection = 'h', species = 'human', id.type = 'entrez'))
}
\author{
Steve Lianoglou for seas; Russell Bainer for GeneSetDb processing and wrapping functions.
}
